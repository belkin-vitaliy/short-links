package org.mephi;
import lombok.Getter;
import lombok.Setter;

import java.util.concurrent.TimeUnit;

/**
 * Представляет собой сокращённый URL-адрес с соответствующими метаданными, такими как исходный URL-адрес,
 * короткий код, срок действия, пользовательский UUID и ограничения доступа.
 * Класс предоставляет функции для получения исходного URL-адреса, проверки срока действия,
 * управления ограничениями доступа и получения пользовательского идентификатора.
 */
@Getter
@Setter
public class ShortenedURL {

    /**
     * Представляет исходный URL-адрес, связанный с сокращённым URL-адресом.
     * Эта переменная содержит полный URL-адрес до его сокращения.
     * Она является неизменяемой и служит основной ссылкой на исходный веб-ресурс.
     */
    private final String originalURL;
    /**
     * Уникальный короткий код, представляющий сокращенный URL-адрес.
     * Код используется для идентификации и обращения к исходному URL-адресу
     * через сокращенный формат, предоставленный сервисом.
     * Является неизменяемым и генерируется на этапе создания объекта.
     */
    private final String shortCode;
    /**
     * Представляет собой время истечения срока действия сокращённого URL в миллисекундах с момента начала отсчёта.
     * Это значение рассчитывается на основе продолжительности, указанной во время создания,
     * и определяет, когда сокращённый URL становится недействительным.
     * Оно неизменно и используется для проверки срока действия сокращённого URL.
     */
    private final long expiryTime;
    /**
     * Представляет собой уникальный идентификатор пользователя, создавшего сокращённый URL.
     * Это значение связано с конкретным пользователем и используется для отслеживания права собственности
     * и управления доступом к сокращённым URL. Оно соответствует полю `uuid`
     * в классе `User`.
     */
    private final String userUUID;
    /**
     * Указывает максимальное количество разрешённых обращений к этому сокращённому URL-адресу.
     * Значение 0 указывает на неограниченный доступ.
     */
    private int accessLimit;

    /**
     * Создаёт экземпляр ShortenedURL с исходным URL-адресом, коротким кодом, сроком действия,
     * идентификатором пользователя и дополнительным ограничением доступа.
     *
     * @param originalURL    исходный URL-адрес, который представляет этот сокращенный URL-адрес.
     * @param shortCode      уникальный короткий код, связанный с этим сокращенным URL-адресом.
     * @param expiryDuration продолжительность в часах, по истечении которой срок действия сокращенного URL-адреса истекает.
     * @param userUUID       уникальный идентификатор пользователя, создавшего этот сокращенный URL-адрес.
     * @param accessLimit    максимальное количество обращений к этому сокращённому URL-адресу или 0 для неограниченного доступа.
     */
    public ShortenedURL(String originalURL, String shortCode, int expiryDuration, String userUUID, int accessLimit) {
        this.originalURL = originalURL;
        this.shortCode = shortCode;
        this.expiryTime = System.currentTimeMillis() + TimeUnit.HOURS.toMillis(expiryDuration);
        this.userUUID = userUUID;
        this.accessLimit = accessLimit;
    }

    /**
     * Проверяет, не истёк ли срок действия сокращённого URL-адреса, исходя из текущего системного времени и заданного срока действия.
     *
     * @return true, если текущее время превышает срок действия URL-адреса; false в противном случае.
     */
    public boolean isExpired() {
        return System.currentTimeMillis() > expiryTime;
    }

    /**
     * Уменьшает лимит доступа для сокращённого URL-адреса, если лимит больше 0.
     *
     * @return true, если ограничение доступа было успешно уменьшено; false, если ограничение уже было равно 0.
     */
    public boolean decrementLimit() {
        if (accessLimit > 0) {
            accessLimit--;
            return true;
        }
        return false;
    }

}
